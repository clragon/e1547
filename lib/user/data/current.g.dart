// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'current.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_CurrentUser _$$_CurrentUserFromJson(Map<String, dynamic> json) =>
    _$_CurrentUser(
      wikiPageVersionCount: json['wiki_page_version_count'] as int,
      artistVersionCount: json['artist_version_count'] as int,
      poolVersionCount: json['pool_version_count'] as int,
      forumPostCount: json['forum_post_count'] as int,
      commentCount: json['comment_count'] as int,
      flagCount: json['flag_count'] as int,
      positiveFeedbackCount: json['positive_feedback_count'] as int,
      neutralFeedbackCount: json['neutral_feedback_count'] as int,
      negativeFeedbackCount: json['negative_feedback_count'] as int,
      uploadLimit: json['upload_limit'] as int,
      id: json['id'] as int,
      createdAt: DateTime.parse(json['created_at'] as String),
      name: json['name'] as String,
      level: json['level'] as int,
      baseUploadLimit: json['base_upload_limit'] as int,
      postUploadCount: json['post_upload_count'] as int,
      postUpdateCount: json['post_update_count'] as int,
      noteUpdateCount: json['note_update_count'] as int,
      isBanned: json['is_banned'] as bool,
      canApprovePosts: json['can_approve_posts'] as bool,
      canUploadFree: json['can_upload_free'] as bool,
      levelString: json['level_string'] as String,
      avatarId: json['avatar_id'] as int?,
      showAvatars: json['show_avatars'] as bool,
      blacklistAvatars: json['blacklist_avatars'] as bool,
      blacklistUsers: json['blacklist_users'] as bool,
      descriptionCollapsedInitially:
          json['description_collapsed_initially'] as bool,
      hideComments: json['hide_comments'] as bool,
      showHiddenComments: json['show_hidden_comments'] as bool,
      showPostStatistics: json['show_post_statistics'] as bool,
      hasMail: json['has_mail'] as bool,
      receiveEmailNotifications: json['receive_email_notifications'] as bool,
      enableKeyboardNavigation: json['enable_keyboard_navigation'] as bool,
      enablePrivacyMode: json['enable_privacy_mode'] as bool,
      styleUsernames: json['style_usernames'] as bool,
      enableAutoComplete: json['enable_auto_complete'] as bool,
      hasSavedSearches: json['has_saved_searches'] as bool,
      disableCroppedThumbnails: json['disable_cropped_thumbnails'] as bool,
      disableMobileGestures: json['disable_mobile_gestures'] as bool,
      enableSafeMode: json['enable_safe_mode'] as bool,
      disableResponsiveMode: json['disable_responsive_mode'] as bool,
      disablePostTooltips: json['disable_post_tooltips'] as bool,
      noFlagging: json['no_flagging'] as bool,
      noFeedback: json['no_feedback'] as bool,
      disableUserDmails: json['disable_user_dmails'] as bool,
      enableCompactUploader: json['enable_compact_uploader'] as bool,
      updatedAt: DateTime.parse(json['updated_at'] as String),
      email: json['email'] as String,
      lastLoggedInAt: DateTime.parse(json['last_logged_in_at'] as String),
      lastForumReadAt: json['last_forum_read_at'] == null
          ? null
          : DateTime.parse(json['last_forum_read_at'] as String),
      recentTags: json['recent_tags'] as String?,
      commentThreshold: json['comment_threshold'] as int,
      defaultImageSize: json['default_image_size'] as String,
      favoriteTags: json['favorite_tags'] as String?,
      blacklistedTags: json['blacklisted_tags'] as String,
      timeZone: json['time_zone'] as String,
      perPage: json['per_page'] as int,
      customStyle: json['custom_style'] as String?,
      favoriteCount: json['favorite_count'] as int,
      apiRegenMultiplier: json['api_regen_multiplier'] as int,
      apiBurstLimit: json['api_burst_limit'] as int,
      remainingApiLimit: json['remaining_api_limit'] as int,
      statementTimeout: json['statement_timeout'] as int,
      favoriteLimit: json['favorite_limit'] as int,
      tagQueryLimit: json['tag_query_limit'] as int,
    );

Map<String, dynamic> _$$_CurrentUserToJson(_$_CurrentUser instance) =>
    <String, dynamic>{
      'wiki_page_version_count': instance.wikiPageVersionCount,
      'artist_version_count': instance.artistVersionCount,
      'pool_version_count': instance.poolVersionCount,
      'forum_post_count': instance.forumPostCount,
      'comment_count': instance.commentCount,
      'flag_count': instance.flagCount,
      'positive_feedback_count': instance.positiveFeedbackCount,
      'neutral_feedback_count': instance.neutralFeedbackCount,
      'negative_feedback_count': instance.negativeFeedbackCount,
      'upload_limit': instance.uploadLimit,
      'id': instance.id,
      'created_at': instance.createdAt.toIso8601String(),
      'name': instance.name,
      'level': instance.level,
      'base_upload_limit': instance.baseUploadLimit,
      'post_upload_count': instance.postUploadCount,
      'post_update_count': instance.postUpdateCount,
      'note_update_count': instance.noteUpdateCount,
      'is_banned': instance.isBanned,
      'can_approve_posts': instance.canApprovePosts,
      'can_upload_free': instance.canUploadFree,
      'level_string': instance.levelString,
      'avatar_id': instance.avatarId,
      'show_avatars': instance.showAvatars,
      'blacklist_avatars': instance.blacklistAvatars,
      'blacklist_users': instance.blacklistUsers,
      'description_collapsed_initially': instance.descriptionCollapsedInitially,
      'hide_comments': instance.hideComments,
      'show_hidden_comments': instance.showHiddenComments,
      'show_post_statistics': instance.showPostStatistics,
      'has_mail': instance.hasMail,
      'receive_email_notifications': instance.receiveEmailNotifications,
      'enable_keyboard_navigation': instance.enableKeyboardNavigation,
      'enable_privacy_mode': instance.enablePrivacyMode,
      'style_usernames': instance.styleUsernames,
      'enable_auto_complete': instance.enableAutoComplete,
      'has_saved_searches': instance.hasSavedSearches,
      'disable_cropped_thumbnails': instance.disableCroppedThumbnails,
      'disable_mobile_gestures': instance.disableMobileGestures,
      'enable_safe_mode': instance.enableSafeMode,
      'disable_responsive_mode': instance.disableResponsiveMode,
      'disable_post_tooltips': instance.disablePostTooltips,
      'no_flagging': instance.noFlagging,
      'no_feedback': instance.noFeedback,
      'disable_user_dmails': instance.disableUserDmails,
      'enable_compact_uploader': instance.enableCompactUploader,
      'updated_at': instance.updatedAt.toIso8601String(),
      'email': instance.email,
      'last_logged_in_at': instance.lastLoggedInAt.toIso8601String(),
      'last_forum_read_at': instance.lastForumReadAt?.toIso8601String(),
      'recent_tags': instance.recentTags,
      'comment_threshold': instance.commentThreshold,
      'default_image_size': instance.defaultImageSize,
      'favorite_tags': instance.favoriteTags,
      'blacklisted_tags': instance.blacklistedTags,
      'time_zone': instance.timeZone,
      'per_page': instance.perPage,
      'custom_style': instance.customStyle,
      'favorite_count': instance.favoriteCount,
      'api_regen_multiplier': instance.apiRegenMultiplier,
      'api_burst_limit': instance.apiBurstLimit,
      'remaining_api_limit': instance.remainingApiLimit,
      'statement_timeout': instance.statementTimeout,
      'favorite_limit': instance.favoriteLimit,
      'tag_query_limit': instance.tagQueryLimit,
    };
